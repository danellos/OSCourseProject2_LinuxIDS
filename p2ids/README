NAME: Trevor Philip
Student ID: NL10252
Date: 5/9/2018
CMSC 421 Project 2, Intrusion Detection System
README FILE
===============================================

The directories below contain the following items:

--------------------
DIRECTORY SPECIFICS:
--------------------
* design 	--> Contains the initial design document and final design document.
* userland	--> contains the two userspace programs, namely, the ids_logger and the ids.
				The "ids_logger" is a standard C program, and the "ids" is a .NET Core
				console application. See "Userland Specifics" for more information.
* kernel	--> Contains the kernel-space code. The kernel-space code contains the C
				code intended to run in kernel space. There are three new system calls
				defined in addsyscalls.c, and the kernel-space logging system itself
				can be found in toggler.c and toggler.h. 
* isdata	--> These contain sample logs of valid system calls. In order to use these logs,
				you need to place them under userland/logger/logs, then go to 
				userland/ids/IntrusionDetectionSystem and type the command "dotnet run".
				Please see the "userland specifics" section for more information.

-------------------
USERLAND SPECIFICS:
-------------------

There are two programs in userland:

1. ids_logger (must be run as root user -- is located in the userland/logger folder)
	* This program was written in C, and can accept the following commands (after running "make"):
		./ids_logger track <pid>
		./ids_logger untrack <pid>
		./ids_logger log <pid> <stagger_msec_optional>	
		
		^ <pid> is the process ID. <stagger_msec_optional> is the delay in milliseconds between successive
		  probings of the kernel for additional logs to write (see design doc for what this means). 
		  It is recommended to not run this at anything less than 50 msec. The default is 150 msec, 
		  so simply not providing that parameter will set that default to 150.
		  
		  IT IS THE USER'S RESPONSIBILITY TO UNTRACK A PROCESS WHEN THEY ARE DONE LOGGING IT AND KNOW IT EXITED
		  
		  Note: The third one will run indefinitely until the user presses CTRL+C.
		  
2. ids (NB: you MUST run install_dotnetcore.sh as root before you can run this!)
	* This is the intrusion detection system itself, which was written in C#. It does not *have* to
	  run as root, but it is recommended you do run it as root in case there are file/directory permission issues
	  on the log files generated by ids_logger.
	* The VMs for the course do not have .NET Core installed. Run install_dotnetcore.sh to install the
	  necessary runtime. This will require an internet connection.
	* To run the ids, simply navigate to userland/ids/IntrusionDetectionSystem and type the following:
		
		dotnet run
	
		^ If running this for the first time, it may need a few moments to download an additional dependency
		  called Newtonsoft.JSON, which the ids uses to manage its database in JSON files. Then, .NET Core
		  will run the IDS. You'll be presented with 4 options.
		  
	* The first option you'll be presented with is training the IDS. In training the IDS, it will look at the
	  configured log directory and parse any files that match the *.log wildcard pattern. Any log file in the
	  log directory are used to train the IDS of valid system calls for given processes, and will be used to
	  build the database. See design doc for specifics here.
	* The second option runs the IDS. This option assumes you already have built the database using option 1 of
	  valid system calls for logs present in the configured log directory. If any of these logs contain an invalid
	  sequence or a system call that is not known, the IDS will report it and write the errors to a 
	  timestamp file located under userland/ids/IntrusionDetectionSystem/intrusion_logs
	* The third option changes the log source directory (this is the directory where ids_logger puts logs). This 
	  shouldn't need to be changed.
	* The fourth option exits the IDS. Nothing fancy :-)
	  
	 
	 
	 
	 
	 
	Note: ids_logger tries to resolve the actual executing file through detecting the symblink in /proc/<pid>/exe.
	      If the ids_logger fails to resolve it, you will be prompted during either the "first" or "second" option
	      in the C# ids program to specify the name of the program. For example, in the provided files in "isdata", 
	      the ones with /proc/ is actually ls. ls runs too quickly for the ids_logger to find its source.
	
	
	
	
	
	
	
	

	
			